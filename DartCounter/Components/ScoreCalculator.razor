@if (Players.Where(_ => _.Score > 0 && !string.IsNullOrWhiteSpace(_.Name)).Any())
{
    <View Title="Submit Score">
        <div class="grid gap-2 lg:gap-6 lg:grid-cols-2">
            <div class="grid grid-cols-3 gap-2 w-full max-w-md mx-auto select-none p-4">
                <fieldset class="col-span-3 border border-2 border-white bg-black/20 block rounded-lg flex flex-row items-center gap-2 mb-8">
                    <legend class="text-xs ml-4 font-bold uppercase">Round #@(Player?.Turns + 1)</legend>
                    <div class="flex-1 text-center p-4 -mt-2 outline-none min-w-0 text-2xl font-bold uppercase">
                        @(string.IsNullOrWhiteSpace(_score) ? "0" : _score)
                    </div>
                </fieldset>
                <CalcButton OnClick="() => {_score = _score + 1;}" Text="1" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 2;}" Text="2" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 3;}" Text="3" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 4;}" Text="4" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 5;}" Text="5" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 6;}" Text="6" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 7;}" Text="7" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 8;}" Text="8" Outlined="true" />
                <CalcButton OnClick="() => {_score = _score + 9;}" Text="9" Outlined="true" />
                <CalcButton OnClick="() => { _score = string.IsNullOrEmpty(_score) ? _score : _score[..(_score.Length-1)];}" Outlined="true" Text="DEL" />
                <CalcButton OnClick="() => {_score = _score + 0;}" Text="0" Outlined="true" />
                <CalcButton OnClick="() => SubmitScore(Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First())" Text="OK" />
            </div>
            @if(ChildContent != null)
            {
                <div class="grid-cols-3 w-full select-none lg:mt-0.5">@ChildContent</div>
            }
        </div>
        <Toolbar>
            <Button Text="Quit Game" OnClick="QuitGame" Outlined="true" />
        </Toolbar>
    </View>
}


@code {
    [Parameter]
    public List<Player> Players { get; set; } = new();

    [Parameter]
    public EventCallback<List<Player>> PlayersChanged { get; set; }

    [Parameter]
    public bool Started { get; set; }

    [Parameter]
    public EventCallback<bool> StartedChanged { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    Player? Player { get => Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).FirstOrDefault(); }

    string _score = string.Empty;

    void SubmitScore(Player player)
    {
        var score = Convert.ToInt32(string.IsNullOrWhiteSpace(_score) ? 0 : _score);
        var calc = player.Score - score;

        _score = string.Empty;

        if (calc >= 0)
        {
            player.Score = calc;

            if (score > player.Highscore)
            {
                player.Highscore = score;
            }
        }

        player.Turns++;

        if (PlayersChanged.HasDelegate) PlayersChanged.InvokeAsync(Players);
    }

    async Task QuitGame()
    {
        Players = new List<Player> { new Player() };
        Started = false;
        if (PlayersChanged.HasDelegate) await PlayersChanged.InvokeAsync(Players);
        if (StartedChanged.HasDelegate) await StartedChanged.InvokeAsync(Started);
    }
}
