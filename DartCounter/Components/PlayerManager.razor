<View Title="Who's Playing?">
    <form @onsubmit="StartGame" class="text-left grid gap-4 select-none p-4">
        @{
            if (Players.Count > 0)
            {
                int i = 1;

                foreach (var player in Players.OrderByDescending(_ => _.Score))
                {

                    <fieldset class="border border-2 border-white/50 block rounded-lg flex flex-row items-center gap-2 transition-colors focus-within:border-white">
                        <input tabindex="@(i)" placeholder="Nickname" type="text" @bind-value="player.Name" @bind-value:event="oninput" class="peer order-2 placeholder:text-white/20 flex-1 p-4 -mt-2 bg-transparent outline-none min-w-0 font-bold uppercase" />
                        <legend class="text-xs ml-4 font-bold uppercase text-white/50 peer-focus:text-white order-1 transition-colors">Player #@(i + 1)</legend>
                        @if(i > 1)
                        {
                            <button type="button" class="p-2 order-3" @onclick="() => RemovePlayer(player)">
                                <Icon Name="@Icons.Delete" />
                            </button>
                        }
                    </fieldset>

                    i++;
                }
            }
        }
    </form>
    <Toolbar>
        <Button Text="Add Player" OnClick="AddPlayer" Outlined="true" />
        <Button Disabled="Disabled" Text="Start Game" OnClick="StartGame" />
    </Toolbar>
</View>


@code {
    [Parameter]
    public List<Player> Players { get; set; } = new();

    [Parameter]
    public EventCallback<List<Player>> PlayersChanged { get; set; }

    [Parameter]
    public bool Started { get; set; }

    [Parameter]
    public EventCallback<bool> StartedChanged { get; set; }

    void AddPlayer()
    {
        Players.Add(new Player());
        if (PlayersChanged.HasDelegate) PlayersChanged.InvokeAsync(Players);
    }

    void RemovePlayer(Player player)
    {
        Players.Remove(player);
        if (!Players.Any()) AddPlayer();
        if (PlayersChanged.HasDelegate) PlayersChanged.InvokeAsync(Players);
    }

    void StartGame()
    {
        if(!Disabled)
        {
            Players.Shuffle();
            Started = true;
            if (PlayersChanged.HasDelegate) PlayersChanged.InvokeAsync(Players);
            if (StartedChanged.HasDelegate) StartedChanged.InvokeAsync(Started);
        }
    }

    bool Disabled
    {
        get => Players.Count == 0 || Players.Any(_ => string.IsNullOrWhiteSpace(_.Name));
    }
}
