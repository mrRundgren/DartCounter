@page "/"

<PageTitle>301 : Dart Counter</PageTitle>

<section class="p-4 block w-full max-w-2xl mx-auto text-center">
    @if (Players.Count == 0 || Disabled || !Disabled && Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).FirstOrDefault() != null)
    {
        <div class="flex flex-col items-center">
            <h1 class="text-left font-bold mt-6 mb-8 grid">
                <span class="text-5xl">@(!Disabled ? $"{Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First().Name}: {Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First().Score}" : "Game: 301")</span>
            </h1>
        </div>
    }
    else
    {
        var i = 0;

        <div class="flex flex-col items-center">
            <h1 class="text-left font-bold px-4 mt-6 mb-8 grid">
                <span class="text-5xl">Scoreboard</span>
            </h1>
        </div>
        <ol>
        @foreach (var player in Players.OrderBy(_ => _.Turns))
        {
            i++;
            <li class="text-left mb-2 select-none">
                <div class="flex flex-row items-center gap-4 p-4 pr-6 bg-neutral-100 rounded-full">
                    @if(i == 1)
                    {
                        <Icon Name="@Icons.WorkspacePremium" class="text-yellow-500" />
                    }
                    else if(i == 2)
                    {
                        <Icon Name="@Icons.WorkspacePremium" class="text-slate-500" />
                    }
                    else if (i == 3)
                    {
                        <Icon Name="@Icons.WorkspacePremium" class="text-amber-900" />
                    }
                    else
                    {
                        <Icon Name="@Icons.SentimentSad" />
                    }
                    <div class="flex-1 font-bold text-xl">@player.Name.ToUpper()</div>
                    <div class="flex flex-col justify-center items-center">
                        <small class="text-xs uppercase text-neutral-400">Turns</small>
                        <strong class="font-bold">@player.Turns</strong>
                    </div>
                    <div class="flex flex-col justify-center items-center">
                        <small class="text-xs uppercase text-neutral-400">Highest score</small>
                        <strong class="font-bold">@player.Highscore</strong>
                    </div>
                </div>
            </li>
        }
        </ol>
        <div class="mt-16 flex flex-row items-center justify-center gap-4">
            <button class="flex-1 px-8 py-4 text-sm uppercase font-bold border border-2 border-black text-black rounded-full" type="button" @onclick="RestartGame">Restart Game</button>
            <button class="flex-1 px-8 py-4 text-sm uppercase font-bold border border-2 border-black bg-black text-white rounded-full" type="button" @onclick="NewGame">New Game</button>
        </div>
    }
    <div class="grid gap-4">
        @if (_started && !Disabled && Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).FirstOrDefault() != null)
        {
            <div class="grid grid-cols-3 gap-2 w-full max-w-xs mx-auto select-none">
                <div class="col-span-3 border border-2 border-neutral text-center w-full p-4 text-lg font-bold min-h-[64px] mb-4 rounded-lg">@(string.IsNullOrWhiteSpace(_score) ? "0" : _score)</div>
                <button @onclick="() => {_score = _score + 1;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">1</button>
                <button @onclick="() => {_score = _score + 2;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">2</button>
                <button @onclick="() => {_score = _score + 3;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">3</button>
                <button @onclick="() => {_score = _score + 4;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">4</button>
                <button @onclick="() => {_score = _score + 5;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">5</button>
                <button @onclick="() => {_score = _score + 6;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">6</button>
                <button @onclick="() => {_score = _score + 7;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">7</button>
                <button @onclick="() => {_score = _score + 8;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">8</button>
                <button @onclick="() => {_score = _score + 9;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">9</button>
                <button @onclick="() => { _score = string.IsNullOrEmpty(_score) ? _score : _score[..(_score.Length-1)];}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">DEL</button>
                <button @onclick="() => {_score = _score + 0;}" class="active:bg-black/20 border border-2 border-black text-black text-xl font-bold rounded-full aspect-video flex items-center justify-center">0</button>
                <button @onclick="() => SubmitScore(Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First())" class="bg-black active:bg-neutral-900 active:border-neutral-900 border border-2 border-black text-white text-xl font-bold rounded-full aspect-video flex items-center justify-center">OK</button>
                <div class="col-span-3 mt-16 grid gap-4">
                    <button class="disabled:opacity-25 px-8 py-4 text-sm uppercase font-bold border border-2 border-black text-black rounded-full" type="button" @onclick="NewGame">Quit Game</button>
                </div>
            </div>
        }
        @if(!_started)
        {
            <form class="text-left grid gap-4">
                @{
                    if (Players.Count > 0)
                    {
                        int i = 1;

                        foreach (var player in Players.OrderByDescending(_ => _.Score))
                        {

                            <fieldset class="border border-2 border-black block rounded-lg flex flex-row items-center gap-2">
                                <legend class="text-xs ml-4 font-bold uppercase">Player #@(i++)</legend>
                                <input placeholder="Player nickname" type="text" @bind-value="player.Name" @bind-value:event="oninput" class="placeholder:text-black/20 flex-1 p-4 -mt-2 bg-transparent outline-none min-w-0 font-bold uppercase" />
                                @if (player.Turns > 0 && player.Score > 0)
                                {
                                    <strong class="p-4 -mt-2">@player.Score</strong>
                                }
                                else if (player.Score == 0)
                                {
                                    <strong class="p-4 -mt-2">Done in @player.Turns turns</strong>
                                }
                                <button type="button" class="p-2" @onclick="() => RemovePlayer(player)">
                                    <Icon Name="@Icons.Delete" />
                                </button>
                            </fieldset>
                        }
                    }
                }
                <div class="mt-16 grid grid-cols-2 gap-4">
                    <button disabled="@_started" class="disabled:opacity-25 px-8 py-4 text-sm uppercase font-bold border border-2 border-black text-black rounded-full" type="button" @onclick="AddPlayer">Add Player</button>
                    <button disabled="@(!_started && Disabled)" class="disabled:opacity-25 px-8 py-4 text-sm uppercase font-bold border border-2 border-black bg-black text-white rounded-full" type="button" @onclick="StartGame">Start Game</button>
                </div>
            </form>
        }
    </div>
</section>

@code {
    List<Player> Players { get; set; } = new();
    string _score = string.Empty;
    bool _started;

    void AddPlayer()
    {
        Players.Add(new Player());
    }

    void RemovePlayer(Player player)
    {
        Players.Remove(player);
        if(_started)
        {
            _started = Players.Any();
        }
    }

    void SubmitScore(Player player)
    {
        var score = Convert.ToInt32(string.IsNullOrWhiteSpace(_score) ? 0 : _score);
        var calc = player.Score - score;

        player.Turns++;
        _score = string.Empty;

        if (calc >= 0)
        {
            player.Score = calc;

            if (score > player.Highscore)
            {
                player.Highscore = score;
            }
        }
    }

    void StartGame()
    {
        Players.Shuffle();
        _started = true;
    }

    void RestartGame()
    {
        foreach(var player in Players)
        {
            player.Score = 301;
            player.Turns = 0;
            player.Highscore = 0;
        }

        Players.Shuffle();
    }

    void NewGame()
    {
        Players = new();
        _started = false;
    }

    bool Disabled
    {
        get => Players.Count == 0 || Players.Any(_ => string.IsNullOrWhiteSpace(_.Name));
    }

    internal class Player
    {
        public string Name { get; set; } = "";
        public int Score { get; set; } = 301;
        public int Turns { get; set; } = 0;
        public int Highscore { get; set; } = 0;
    }
}