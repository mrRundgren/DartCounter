@if (Players.Where(_ => _.Score > 0 && !string.IsNullOrWhiteSpace(_.Name)).Any())
{   
    <View Title="Submit Score">
        <div class="grid gap-4 lg:gap-6 lg:grid-cols-2">
            <div class="px-4 flex flex-row items-center gap-4 border-b border-white/20 lg:col-span-2">
                <button @onclick="() => _current = Counters.Dartboard" class="@(_current == Counters.Dartboard ? "border-b border-white text-white" : "border-b border-transparent text-white/50") flex-1 uppercase text-xs font-bold px-4 py-2 -mb-px">Dartboard</button>
                <button @onclick="() => _current = Counters.Manual" class="@(_current == Counters.Manual ? "border-b border-white text-white" : "border-b border-transparent text-white/50") flex-1 uppercase text-xs font-bold px-4 py-2 -mb-px">Manual</button>
            </div>
            @switch(_current)
            {
                case Counters.Dartboard:
                    <Dartboard @ref="_dartboard" Player="Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First()" SubmitScore="OnSubmitScore" class="min-h-[437px] p-4 flex flex-col items-center justify-center w-full max-w-lg mx-auto pr-6" />
                    break;
                default:
                    <div class="grid grid-cols-3 gap-4 w-full max-w-md mx-auto select-none p-4 pb-3">
                        <fieldset class="col-span-3 border border-2 border-white/50 bg-black/20 block rounded-lg flex flex-row items-center gap-2 mb-8">
                            <legend class="text-xs ml-4 font-bold uppercase text-white/50">Round #@(Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First().Turns + 1)</legend>
                            <div class="flex-1 text-center p-4 -mt-2 outline-none min-w-0 text-4xl font-bold uppercase">
                                @(string.IsNullOrWhiteSpace(_score) ? "0" : _score)
                            </div>
                        </fieldset>
                        <CalcButton OnClick="() => {_score = _score + 1;}" Text="1" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 2;}" Text="2" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 3;}" Text="3" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 4;}" Text="4" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 5;}" Text="5" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 6;}" Text="6" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 7;}" Text="7" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 8;}" Text="8" Outlined="true" />
                        <CalcButton OnClick="() => {_score = _score + 9;}" Text="9" Outlined="true" />
                        <CalcButton OnClick="() => { _score = string.IsNullOrEmpty(_score) ? _score : _score[..(_score.Length-1)];}" Outlined="true" Text="DEL" />
                        <CalcButton OnClick="() => {_score = _score + 0;}" Text="0" Outlined="true" />
                        <CalcButton OnClick="() => SubmitScore(Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First())" Text="OK" />
                    </div>
                    break;
            }
            @if (ChildContent != null)
            {
                <div class="w-full select-none lg:mt-2">@ChildContent</div>
            }
        </div>
        <Toolbar>
            <Button Text="Quit Game" OnClick="QuitGame" Outlined="true" />
        </Toolbar>
    </View>
}


@code {
    [Parameter]
    public List<Player> Players { get; set; } = new();

    [Parameter]
    public EventCallback<List<Player>> PlayersChanged { get; set; }

    [Parameter]
    public bool Started { get; set; }

    [Parameter]
    public EventCallback<bool> StartedChanged { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    enum Counters { Manual, Dartboard }
    Dartboard _dartboard { get; set; } = null!;
    string _score = string.Empty;
    Counters _current = Counters.Dartboard;

    void SubmitScore(Player player)
    {
        var score = Convert.ToInt32(string.IsNullOrWhiteSpace(_score) ? 0 : _score);
        var calc = player.Score - score;

        _score = string.Empty;

        if (calc >= 0)
        {
            player.Score = calc;

            if (score > player.Highscore)
            {
                player.Highscore = score;
            }
        }

        player.Turns++;

        if (PlayersChanged.HasDelegate) PlayersChanged.InvokeAsync(Players);

        StateHasChanged();
    }

    void OnSubmitScore((Player player, int score) result)
    {
        _score = result.score.ToString();
        
        SubmitScore(result.player);
        
        if (Players.Where(_ => _.Score > 0 && !string.IsNullOrWhiteSpace(_.Name)).Any())
        {
            var player = Players.Where(_ => _.Score > 0).OrderBy(_ => _.Turns).First();
            _dartboard.Reset(player);
        }
    }

    void OnNextTurn(Player player)
    {
        player.Turns++;
        if (PlayersChanged.HasDelegate) PlayersChanged.InvokeAsync(Players);
    }

    async Task QuitGame()
    {
        Players = new List<Player> { new Player() };
        Started = false;
        if (PlayersChanged.HasDelegate) await PlayersChanged.InvokeAsync(Players);
        if (StartedChanged.HasDelegate) await StartedChanged.InvokeAsync(Started);
    }
}
